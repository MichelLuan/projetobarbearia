üìÅ Projeto App barbeiro/
‚îú‚îÄ‚îÄ üìÅ __pycache__/          ‚Üê Arquivos compilados do Python (n√£o editar)
‚îú‚îÄ‚îÄ üìÅ instance/             ‚Üê Banco de dados SQLite (criado automaticamente)
‚îú‚îÄ‚îÄ üìÅ static/               ‚Üê ARQUIVOS DO FRONTEND (CSS, JS, imagens)
‚îÇ   ‚îú‚îÄ‚îÄ    css/             ‚Üê Estilos personalizados
‚îÇ   ‚îú‚îÄ‚îÄ    js/              ‚Üê JavaScript do sistema
‚îÇ   ‚îî‚îÄ‚îÄ    manifest.json    ‚Üê Configura√ß√£o PWA
‚îú‚îÄ‚îÄ üìÅ templates/            ‚Üê P√ÅGINAS HTML (templates Jinja2)
‚îú‚îÄ‚îÄ üìÅ uploads/             ‚Üê Arquivos enviados pelos usu√°rios
‚îú‚îÄ‚îÄ üìÅ venv_temp/           ‚Üê Ambiente virtual Python (depend√™ncias)
‚îú‚îÄ‚îÄ üìÑ app.py               ‚Üê ARQUIVO PRINCIPAL - Backend Flask
‚îú‚îÄ‚îÄ üìÑ models.py            ‚Üê MODELOS DO BANCO - Estrutura das tabelas
‚îú‚îÄ‚îÄ üìÑ config.py            ‚Üê Configura√ß√µes da aplica√ß√£o
‚îú‚îÄ‚îÄ üìÑ requirements.txt     ‚Üê Depend√™ncias Python
‚îú‚îÄ‚îÄ üìÑ run.py               ‚Üê Script para executar a aplica√ß√£o
‚îú‚îÄ‚îÄ üìÑ test_app.py          ‚Üê Testes b√°sicos
‚îú‚îÄ‚îÄ üìÑ README.md            ‚Üê Documenta√ß√£o completa
‚îî‚îÄ‚îÄ    INSTRUCOES_RAPIDAS.md ‚Üê Guia de uso r√°pido

ONDE FICAM AS TELAS (FRONTEND):
üìÅ templates/
‚îú‚îÄ‚îÄ üìÑ base.html              ‚Üê TEMPLATE BASE (estrutura comum)
‚îú‚îÄ‚îÄ üìÑ index.html             ‚Üê P√ÅGINA INICIAL (p√∫blica)
‚îú‚îÄ‚îÄ üìÑ login.html             ‚Üê TELA DE LOGIN/REGISTRO
‚îú‚îÄ‚îÄ üìÑ dashboard.html         ‚Üê DASHBOARD DO USU√ÅRIO
‚îú‚îÄ‚îÄ üìÑ admin_dashboard.html   ‚Üê PAINEL DO ADMIN
‚îú‚îÄ‚îÄ üìÑ admin_usuarios.html    ‚Üê GERENCIAR USU√ÅRIOS
‚îî‚îÄ‚îÄ üìÑ admin_barbearias.html  ‚Üê GERENCIAR BARBEARIAS

1:
POR ONDE COME√áAR A REVISAR O C√ìDIGO:
üî¥ PRIMEIRO: Arquivo Principal (app.py)
O que √©: Motor principal da aplica√ß√£o
O que faz: Define todas as rotas (URLs) e l√≥gica do sistema
Por que come√ßar aqui: √â o "c√©rebro" que conecta tudo
O que procurar:
Rotas de administra√ß√£o (/admin, /admin/usuarios)
Rotas de usu√°rios (/dashboard, /login)
L√≥gica de autentica√ß√£o e autoriza√ß√£o

2:
üü° SEGUNDO: Modelos (models.py)
O que √©: Estrutura do banco de dados
O que faz: Define como os dados s√£o organizados
Por que revisar: Entende a estrutura dos dados
O que procurar:
Tabela User (usu√°rios e admin)
Tabela Barbearia (barbearias dos clientes)
Relacionamentos entre as tabelas

üü¢ TERCEIRO: Templates (templates/)
O que √©: Interface visual (HTML)
O que faz: P√°ginas que o usu√°rio v√™
Por que revisar: Entende como o sistema se parece
O que procurar:
admin_dashboard.html (painel do admin)
admin_usuarios.html (gerenciar usu√°rios)
base.html (estrutura comum)

3:
FUNCIONALIDADES IMPLEMENTADAS:
üëë SISTEMA DE ADMINISTRA√á√ÉO:
Dashboard Admin: /admin
Estat√≠sticas gerais do sistema
Vis√£o de usu√°rios ativos/bloqueados
Contadores de barbearias, profissionais, servi√ßos
Gerenciar Usu√°rios: /admin/usuarios
Lista todos os clientes
Bot√£o para bloquear/desbloquear contas
Deletar usu√°rios (cuidado: deleta tudo!)
Busca e filtros
Gerenciar Barbearias: /admin/barbearias
Visualizar todas as barbearias
Ver status (ativa/bloqueada)
Informa√ß√µes de propriet√°rios
   CONTROLE DE ACESSO:
Login Admin: admin / admin
Bloqueio por Pagamento: Campo ativo na tabela User
Seguran√ßa: Sess√µes separadas para admin e usu√°rios

4:
COMO PERSONALIZAR O SISTEMA:
   FRONTEND (Visual):
Arquivo: static/css/style.css
O que alterar: Cores, fontes, espa√ßamentos
Exemplo: Mudar cor principal do sistema
‚öôÔ∏è BACKEND (Funcionalidades):
Arquivo: app.py
O que alterar: Adicionar novas rotas, modificar l√≥gica
Exemplo: Criar nova funcionalidade de relat√≥rios
üóÑÔ∏è BANCO DE DADOS:
Arquivo: models.py
O que alterar: Adicionar novos campos, tabelas
Exemplo: Adicionar campo de "plano" para cobran√ßa

5:
COMANDOS √öTEIS PARA DESENVOLVIMENTO:

# Executar a aplica√ß√£o
python run.py

# Instalar novas depend√™ncias
pip install nome-do-pacote

# Atualizar requirements.txt
pip freeze > requirements.txt

# Testar a aplica√ß√£o
python test_app.py

6:
FUNCIONALIDADES PWA:
Manifest: static/manifest.json
Service Worker: static/js/sw.js
Instala√ß√£o: Usu√°rios podem instalar como app
Offline: Funciona sem internet (b√°sico)

7:
FUNCIONALIDADES PWA:
Manifest: static/manifest.json
Service Worker: static/js/sw.js
Instala√ß√£o: Usu√°rios podem instalar como app
Offline: Funciona sem internet (b√°sico)

8:
DICAS IMPORTANTES:
Sempre fa√ßa backup antes de modificar
Teste em ambiente de desenvolvimento primeiro
Use o console do navegador para debugar JavaScript
Verifique os logs do Flask para erros
Mantenha o banco limpo durante desenvolvimento




